openapi: 3.0.0
info:
  title: Music Library API
  version: "1.0"
  description: API for managing a music library, including CRUD operations and fetching song details.
servers:
  - url: http://127.0.0.1:8080
paths:
  /songs:
    get:
      summary: "Get a list of songs"
      description: "Returns a list of songs with optional filtering by group name and song title. Supports pagination."
      parameters:
        - name: group
          in: query
          required: false
          schema:
            type: string
          description: "Group name to filter songs"
        - name: song
          in: query
          required: false
          schema:
            type: string
          description: "Song title to filter"
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: "Page number for pagination"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          description: "Number of items per page"
      responses:
        "200":
          description: "List of songs"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongListResponse'

  /songs/verse/{id}/{verse_id}:
    get:
      summary: "Get song verses text"
      description: "Returns the text of song verses with pagination."
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "Song ID"
        - name: verse_id
          in: path
          required: true
          schema:
            type: integer
          description: "Verse number"
      responses:
        "200":
          description: "Song verse text"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongVersesResponse'

  /songs/create:
    post:
      summary: "Add a new song"
      description: "Adds a new song with the specified group name and song title. Queries an external API for additional information."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSongRequest'
      responses:
        "200":
          description: "Song created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongActionResponse'

  /songs/update/{id}:
    put:
      summary: "Update song data"
      description: "Updates the information of a song by its ID."
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "Song ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongUpdate'
      responses:
        "200":
          description: "Song updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongActionResponse'

  /songs/delete/{id}:
    delete:
      summary: "Delete a song"
      description: "Deletes a song from the library by its ID."
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "Song ID"
      responses:
        "200":
          description: "Song deleted successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongActionResponse'

components:
  schemas:
    AddSongRequest:
      type: object
      properties:
        group:
          type: string
        song:
          type: string

    SongActionResponse:
      type: object
      properties:
        message:
          type: string

    SongFilterRequest:
      type: object
      properties:
        group:
          type: string
        song:
          type: string
        page:
          type: integer
        limit:
          type: integer

    SongListResponse:
      type: object
      properties:
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        total:
          type: integer

    SongVersesRequest:
      type: object
      properties:
        song_id:
          type: integer
        verse_number:
          type: integer

    SongDeleteRequest:
      type: object
      properties:
        song_id:
          type: integer

    SongVersesResponse:
      type: object
      properties:
        id:
          type: integer
        group:
          type: string
        song:
          type: string
        releaseDate:
          type: string
          format: date
        link:
          type: string
        text:
          type: string

    Song:
      type: object
      properties:
        id:
          type: integer
        group:
          type: string
        song:
          type: string
        releaseDate:
          type: string
          format: date
        link:
          type: string
        text:
          type: string

    SongUpdate:
      type: object
      properties:
        group:
          type: string
        song:
          type: string
        releaseDate:
          type: string
          format: date
        link:
          type: string
        text:
          type: string
